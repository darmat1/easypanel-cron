# --- Этап 1: Сборка приложения (Builder) ---
# Мы используем официальный образ Go для компиляции
FROM golang:1.21-alpine AS builder

# Устанавливаем рабочую директорию внутри контейнера
WORKDIR /app

# Копируем файлы зависимостей и скачиваем их.
# Это кэшируется, чтобы не скачивать все заново при каждом изменении кода.
COPY go.mod go.sum ./
RUN go mod download

# Копируем остальной исходный код
COPY . .

# Собираем приложение.
# CGO_ENABLED=0 создает статичный бинарный файл без C-зависимостей.
# -o /runner указывает, куда положить скомпилированный файл.
RUN CGO_ENABLED=0 GOOS=linux go build -o /runner main.go


# --- Этап 2: Финальный образ (Runner) ---
# Мы используем самый маленький базовый образ, чтобы наш сервис был легковесным.
FROM alpine:latest

# Копируем системные сертификаты из образа-сборщика, они нужны для HTTPS-запросов.
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Копируем только скомпилированный бинарный файл из образа-сборщика.
# Ничего лишнего, только один файл.
COPY --from=builder /runner /runner

# Указываем команду, которая будет запущена при старте контейнера.
ENTRYPOINT ["/runner"]